{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Parameters": {

		"myVpc": {
			"Description": "Id for Vpc",
			"Type": "String"
		},
		"PublicSubnetKey1": {
			"Description": "Id for Subnet1",
			"Type": "String"
		},
		"PublicSubnetKey2": {
			"Description": "Id for subnet2",
			"Type": "String"
		},
		"PublicSubnetKey3": {
			"Description": "Id for subnet3",
			"Type": "String"
		},
		"circleci": {
			"Description": "circleci user",
			"Type": "String"
		},
		"KeyName": {
			"Description": "EC2 KeyPair to enable SSH access to the instance",
			"Type": "AWS::EC2::KeyPair::KeyName"
		},

		"ImageID": {
			"Type": "String"
		},"domain": {
			"Type": "String"
		},

		"CDARN": {
			"Type": "String"
		},
		"CDARNWAF": {
			"Type": "String"
		},
		"CDARN1": {
			"Type": "String"
		},
		"Bucket": {
			"Type": "String"
		},
		"Bucket1": {
			"Type": "String"
		},
		"Bucket3": {
			"Type": "String"
		},
                "CERTIFICATE": {
			"Type": "String"
		},
		
               "CDR": {
			"Type": "String"
		}
	},


	"Conditions": {
		"Is-EC2-VPC": {
			"Fn::Equals": [{
					"Ref": "AWS::Region"
				},
				"us-east-1"
			]
		}
	},
	"Resources": {
		"asglaunchconfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"ImageId": {
					"Ref": "ImageID"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"InstanceType": "t2.micro",
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"VolumeSize": 20,
						"VolumeType": "gp2",
						"DeleteOnTermination": "true"
					}
				}],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"#!/bin/bash -xe ",
								"sudo su",
								"cd /usr/lib/systemd/system",
								"touch tomcat.service",
								"echo '[Unit]' > tomcat.service",
								"echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
								"echo 'After=syslog.target network.target' >> tomcat.service",
								"echo '[Service]' >> tomcat.service",
								"echo 'Type=forking' >> tomcat.service",
								"echo 'SuccessExitStatus=143' >> tomcat.service",
								"echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
								"echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
								"echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
								"echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
								"echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
								"echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
								"echo 'User=tomcat' >> tomcat.service",
								"echo 'Group=tomcat' >> tomcat.service",
                                				"echo 'UMask=0007' >> tomcat.service",
                        					"echo 'RestartSec=10' >> tomcat.service",
								"echo 'Restart=on-failure' >> tomcat.service",
								"echo '[Install]' >> tomcat.service",
								"echo 'WantedBy=multi-user.target' >> tomcat.service",
								"echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh \n",
								{
									"Fn::Join": [
										"", [
											"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"myRDSInstance",
													"Endpoint.Address"
												]
											},
											":3306/csye6225\"' >> /opt/tomcat/bin/setenv.sh \n"
										]
									]
								},
								"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.profiles.active=dev\"'  >> /opt/tomcat/bin/setenv.sh \n",
								"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"'  >> /opt/tomcat/bin/setenv.sh \n",
								"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"'  >> /opt/tomcat/bin/setenv.sh \n",
								"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.dbname=csye6225\"'  >> /opt/tomcat/bin/setenv.sh \n",
								{
									"Fn::Join": [
										"", [
											"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.amazonProperties.bucketName=",

											{
												"Ref": "Bucket3"
											},

											"\"' >> /opt/tomcat/bin/setenv.sh \n"
										]
									]
								},
								"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.amazonProperties.endpoint=https://s3.us-east-1.amazonaws.com\"'  >> /opt/tomcat/bin/setenv.sh \n",
								{
									"Fn::Join": [
										"", [
											"sudo echo 'JAVA_OPTS=\"$JAVA_OPTS -Djsa.s3.bucket=",
											{
												"Fn::Join": [
													"", [
														"",
														{
															"Ref": "Bucket3"
														}
													]
												]
											},
											"\"' >> /opt/tomcat/bin/setenv.sh \n"
										]
									]
								},
								"chmod +x /opt/tomcat/bin/setenv.sh\n",
								"systemctl daemon-reload",
								"systemctl enable tomcat.service",
								"systemctl start tomcat.service"
							]
						]
					}
				},
				"AssociatePublicIpAddress": "true",
				"SecurityGroups" : [{"Fn::GetAtt": [
								"webappSecurityGroup",
								"GroupId"
							]}
							],
				"IamInstanceProfile": "ec2instanceprofile",
				"LaunchConfigurationName" : "asglaunchconfig"
			}
		},

               "codeDeployApp": {
			"Type": "AWS::CodeDeploy::Application",
			"Properties": {
				"ApplicationName": "csye6225-webapp",
				"ComputePlatform": "Server"
			}
		},
		"deploymentGroup": {
			"Type": "AWS::CodeDeploy::DeploymentGroup",
			"Properties": {
				"ApplicationName": {
					"Ref": "codeDeployApp"
				},
                                "AutoScalingGroups": [{
					"Ref": "WebServerGroup"
				}],
				"Ec2TagFilters": [{
					"Key": "Name",
					"Value": "CSYE_6225_AutoScaling",
					"Type": "KEY_AND_VALUE"
				}],
				"DeploymentGroupName": "csye6225-webapp-deployment",
				"DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
				"DeploymentStyle": {
					"DeploymentType": "IN_PLACE",
					"DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
				},
				"ServiceRoleArn": {
					"Ref" : "CDR"
				},
                                "LoadBalancerInfo": {
					   "ElbInfoList": [
					      {
						 "Name": "load-balancer"
					      }
					   ]
					},
				"AutoRollbackConfiguration": {
					"Enabled": "True",
					"Events": ["DEPLOYMENT_FAILURE"]
				}
			}
		},
		"myDynamoDB": {
			"Type": "AWS::DynamoDB::Table",
			"Properties": {
				"TableName": "csye-6225",
				"AttributeDefinitions": [{
					"AttributeName": "id",
					"AttributeType": "S"
				}
				],
				"KeySchema": [{
					"AttributeName": "id",
					"KeyType": "HASH"
				}


                                ],
				"ProvisionedThroughput": {
					"ReadCapacityUnits": "5",
					"WriteCapacityUnits": "5"
				},
				"TimeToLiveSpecification": {
		  	 		"AttributeName" : "tokenTTL",
					"Enabled": "true"
				}
			}
		},
		"RDSDBSubnetGroup": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "RDS DB Subnet Group",
				"SubnetIds": [{
						"Ref": "PublicSubnetKey2"
					},
					{
						"Ref": "PublicSubnetKey3"
					}
				]
			}
		},
               

             

		"myRDSInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "5",
				"DBInstanceClass": "db.t2.medium",
				"DBInstanceIdentifier": "csye6225",
				"DBName": "csye6225",
				"DBSubnetGroupName": {
					"Ref": "RDSDBSubnetGroup"
				},
				"Engine": "MySQL",
				"MasterUsername": "csye6225master",
				"MasterUserPassword": "csye6225password",
				"MultiAZ": false,
				"PubliclyAccessible": true,
				"VPCSecurityGroups": {
					"Fn::If": [
						"Is-EC2-VPC",
						[{
							"Fn::GetAtt": [
								"DBSecurityGroup",
								"GroupId"
							]
						}],
						{
							"Ref": "AWS::NoValue"
						}
					]
				}
			}
		},
		"webappSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Allow http traffic to webserver",
                                "GroupName": "csye6225-webapp",
				"VpcId": {
					"Ref": "myVpc"
				         }
			               }
		},
                  "OutboundRule": {
                                   "Type": "AWS::EC2::SecurityGroupEgress",
                                   "Properties": {
                                                  "IpProtocol": "tcp",
                                                  "FromPort": "8080",
                                                  "ToPort": "8080",
                                                  "DestinationSecurityGroupId": {
                                                                                 "Fn::GetAtt": [
                                                                                     "webappSecurityGroup",
                                                                                     "GroupId"
                                                                                                ]
                                                                                },
                                                  "GroupId": {
                                                              "Fn::GetAtt": [
                                                             "EC2SecurityGroupLoadBalancer",
                                                             "GroupId"
                                                                            ]
                                                            }
                                                  }
                 },
                    "InboundRule": {
                                    "Type": "AWS::EC2::SecurityGroupIngress",
                                    "Properties": {
                                                   "IpProtocol": "tcp",
                                                   "FromPort": "8080",
                                                   "ToPort": "8080",
                                                   "SourceSecurityGroupId": {
                                                                              "Fn::GetAtt": [
                                                                                       "EC2SecurityGroupLoadBalancer",
                                                                                       "GroupId"
                                                                                            ]
                                                                             },
                                                    "GroupId": {
                                                                "Fn::GetAtt": [
                                                                                "webappSecurityGroup",
                                                                                 "GroupId"
                                                                 ]
                                                                }
                                                   }
                                  },
		"DBSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Condition": "Is-EC2-VPC",
			"Properties": {
				"GroupName": "csye6225-rds",
				"GroupDescription": "allow connections from specified source security group and ec2 Security group",
				"VpcId": {
					"Ref": "myVpc"
				},
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Ref": "webappSecurityGroup"
					}
				}]
			}
		},
                "myDNSRecord" : {
                     "Type" : "AWS::Route53::RecordSet",
                    "Properties" : {
                            "HostedZoneName" : { "Ref" : "domain" },
                            "Comment" : "DNS name for my instance.",  
                            "Name" : {
						"Ref": "domain"
					},

                            "Type" : "A",
			"AliasTarget": {
				  "DNSName": {
				    "Fn::GetAtt": [
				      "loadbalancer",
				      "DNSName"
				    ]
				   },
				 "EvaluateTargetHealth" : "true", 
                            "HostedZoneId": {"Fn::GetAtt": [ "loadbalancer", "CanonicalHostedZoneID" ]    }   
			}
			}
                          },
 "myDNSRecordWAF" : {
                     "Type" : "AWS::Route53::RecordSet",
                    "Properties" : {
                            "HostedZoneName" : { "Ref" : "domain" },
                            "Comment" : "DNS name for my instance.",  
                            "Name" : {
						"Ref": "CDARNWAF"
					},

                            "Type" : "A",
			"AliasTarget": {
				  "DNSName": {
				    "Fn::GetAtt": [
				      "loadbalancerwaf",
				      "DNSName"
				    ]
				   },
				 "EvaluateTargetHealth" : "true", 
                            "HostedZoneId": {"Fn::GetAtt": [ "loadbalancerwaf", "CanonicalHostedZoneID" ]    }   
			}
			}
                          },


                "loadbalancer" : {
                             "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
                             "Properties" : {    
                                   "IpAddressType" : "ipv4",
                                   "Name" : "load-balancer",
                                   "Scheme" : "internet-facing",
                                   "SecurityGroups" : [{ "Ref": "EC2SecurityGroupLoadBalancer"}],
                                   "Subnets" : [
                                                  {
                                                    "Ref": "PublicSubnetKey1"
                                                   },
                                                   {
                                                     "Ref": "PublicSubnetKey2"
                                                   },
                                                   {
                                                      "Ref": "PublicSubnetKey3"
                                                   }
                                              ],
                                 "Tags": [
                                          {
                                           "Key": "Name",
                                           "Value": "CSYE_6225_AutoScaling"
                                          }
                                         ],
                                   "Type" : "application"
                              }
                            },
 "loadbalancerwaf" : {
                             "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
                             "Properties" : {    
                                   "IpAddressType" : "ipv4",
                                   "Name" : "load-balancerwaf",
                                   "Scheme" : "internet-facing",
                                   "SecurityGroups" : [{ "Ref": "EC2SecurityGroupLoadBalancer"}],
                                   "Subnets" : [
                                                  {
                                                    "Ref": "PublicSubnetKey1"
                                                   },
                                                   {
                                                     "Ref": "PublicSubnetKey2"
                                                   },
                                                   {
                                                      "Ref": "PublicSubnetKey3"
                                                   }
                                              ],
                                 "Tags": [
                                          {
                                           "Key": "Name",
                                           "Value": "CSYE_6225_AutoScaling"
                                          }
                                         ],
                                   "Type" : "application"
                              }
                            },
                "EC2SecurityGroupLoadBalancer": {
	                 "Type": "AWS::EC2::SecurityGroup",
	                 "Properties": {
		             "GroupName": "csye6225-load-balancer-sg",
		            "GroupDescription": "Security group for load balancer",
		         "SecurityGroupIngress": [
		         {
		           "IpProtocol": "tcp",
		           "FromPort": "443",
		           "ToPort": "443",
		           "CidrIp": "0.0.0.0/0"
		         }
		     ],
		          "VpcId": {
					"Ref": "myVpc"
				}
	           }
	        },
                "Listener": {
                             "Type": "AWS::ElasticLoadBalancingV2::Listener",
                             "Properties": {
                                            "Certificates": [
                                                                {
                                                                  "CertificateArn": {
                                                                                      "Ref": "CERTIFICATE"
                                                                                    }
                                                                 }
                                                            ],
                                            "DefaultActions": [
                                                               {
                                                                "TargetGroupArn": {
                                                                                    "Ref": "ALBTargetGroup"
                                                                                  },
                                                                "Type": "forward"
                                                               }
                                                              ],
                                            "LoadBalancerArn": {
                                                                 "Ref": "loadbalancer"
                                                               },
                                            "Port": "443",
                                            "Protocol": "HTTPS"
                                           }
                           },
"Listenerwaf": {
                             "Type": "AWS::ElasticLoadBalancingV2::Listener",
                             "Properties": {
                                            "Certificates": [
                                                                {
                                                                  "CertificateArn": {
                                                                                      "Ref": "CERTIFICATE"
                                                                                    }
                                                                 }
                                                            ],
                                            "DefaultActions": [
                                                               {
                                                                "TargetGroupArn": {
                                                                                    "Ref": "ALBTargetGroupwaf"
                                                                                  },
                                                                "Type": "forward"
                                                               }
                                                              ],
                                            "LoadBalancerArn": {
                                                                 "Ref": "loadbalancerwaf"
                                                               },
                                            "Port": "443",
                                            "Protocol": "HTTPS"
                                           }
                           },
                  "ALBTargetGroup": {
                           "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                           "Properties": {
                                           "Name": "LBTarget",
                                           "Port": "8080",
                                           "HealthCheckPort": "8080",
                                           "Matcher": {
                                           "HttpCode": "401,200"
                                                       },
                                          "HealthCheckIntervalSeconds": 30,
                                          "HealthCheckTimeoutSeconds": 20,
                                          "HealthyThresholdCount": 3,
                                          "Protocol": "HTTP",
                                          "VpcId": {
                                                    "Ref": "myVpc"
                                                    },
                                          "TargetGroupAttributes":[
                                                                      {
                                                                    "Value": "120",
                                                                    "Key": "deregistration_delay.timeout_seconds"
                                                                     }
                                                                  ],
                                          "Tags": [
                                                    {
                                                      "Key": "Name",
                                                      "Value": "CSYE_6225_AutoScaling"
                                                     }
                                                  ]
                                         }
                     },
	"ALBTargetGroupwaf": {
                           "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
                           "Properties": {
                                           "Name": "LBTargetwaf",
                                           "Port": "8080",
                                           "HealthCheckPort": "8080",
                                           "Matcher": {
                                           "HttpCode": "401,200"
                                                       },
                                          "HealthCheckIntervalSeconds": 30,
                                          "HealthCheckTimeoutSeconds": 20,
                                          "HealthyThresholdCount": 3,
                                          "Protocol": "HTTP",
                                          "VpcId": {
                                                    "Ref": "myVpc"
                                                    },
                                          "TargetGroupAttributes":[
                                                                      {
                                                                    "Value": "300",
                                                                    "Key": "deregistration_delay.timeout_seconds"
                                                                     }
                                                                  ],
                                          "Tags": [
                                                    {
                                                      "Key": "Name",
                                                      "Value": "CSYE_6225_AutoScaling"
                                                     }
                                                  ]
                                         }
                     },
			"WebServerGroup":{
				       "Type" : "AWS::AutoScaling::AutoScalingGroup",
				       "Properties" : {
				       "VPCZoneIdentifier": [
					  {
					    "Ref": "PublicSubnetKey1"
					  },
					  {
					    "Ref": "PublicSubnetKey2"
					  },
					{
					    "Ref": "PublicSubnetKey3"
					  }
					],
				    "TargetGroupARNs": [
					      {
						"Ref": "ALBTargetGroup"
					      },
{
						"Ref": "ALBTargetGroupwaf"
					      }
					    ],
					  "AutoScalingGroupName" : "WebServerGroup",
					  "Cooldown" : "60",
					  "DesiredCapacity" : "3",
					  "LaunchConfigurationName" : {"Ref": "asglaunchconfig"},
					  "MaxSize" : "10",
					  "MinSize" : "3", 
					   "Tags": [
					  {
					    "PropagateAtLaunch": true,
					    "Key": "Name",
					    "Value": "CSYE_6225_AutoScaling"
					  }
					]
				       }
            },
			"WebServerScaleUpPolicy": {
			    "Type": "AWS::AutoScaling::ScalingPolicy",
			    "Properties": {
			      "AdjustmentType": "ChangeInCapacity",
			      "AutoScalingGroupName": {
				"Ref": "WebServerGroup"
			      },
			      "Cooldown": "60",
			      "ScalingAdjustment": "1"
			    }
			  },
		  "WebServerScaleDownPolicy": {
		    "Type": "AWS::AutoScaling::ScalingPolicy",
		    "Properties": {
		      "AdjustmentType": "ChangeInCapacity",
		      "AutoScalingGroupName": {
			"Ref": "WebServerGroup"
		      },
		      "Cooldown": "60",
		      "ScalingAdjustment": "-1"
		    }
		  },
		"CPUAlarmHigh": {
		    "Type": "AWS::CloudWatch::Alarm",
		    "Properties": {
		      "AlarmDescription": "Scale-up if CPU > 20% for 10 minutes",
		      "MetricName": "CPUUtilization",
		      "Namespace": "AWS/EC2",
		      "Statistic": "Average",
		      "Period": "60",
		      "EvaluationPeriods": "2",
		      "Threshold": "20",
		      "AlarmActions": [
			{
			  "Ref": "WebServerScaleUpPolicy"
			}
		      ],
		      "Dimensions": [
			{
			  "Name": "AutoScalingGroupName",
			  "Value": {
			    "Ref": "WebServerGroup"
			  }
			}
		      ],
		      "ComparisonOperator": "GreaterThanThreshold"
		    }
		  },
		  "CPUAlarmLow": {
		    "Type": "AWS::CloudWatch::Alarm",
		    "Properties": {
		      "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
		      "MetricName": "CPUUtilization",
		      "Namespace": "AWS/EC2",
		      "Statistic": "Average",
		      "Period": "60",
		      "EvaluationPeriods": "2",
		      "Threshold": "70",
		      "AlarmActions": [
			{
			  "Ref": "WebServerScaleDownPolicy"
			}
		      ],
		      "Dimensions": [
			{
			  "Name": "AutoScalingGroupName",
			  "Value": {
			    "Ref": "WebServerGroup"
			  }
			}
		      ],
		      "ComparisonOperator": "LessThanThreshold"
		    }
		  }
                
    }
}

